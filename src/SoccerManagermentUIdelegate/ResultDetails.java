/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package SoccerManagermentUIdelegate;
import java.sql.*;
import SoccerManagementModel.*;
import SoccerManagementDTO.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
/**
 *
 * @author Administrator
 */
public class ResultDetails extends javax.swing.JFrame {

    /**
     * Creates new form ResultDetails
     */
    static int idmatch;
    MatchShedules result= new MatchShedules();
    ArrayList<Integer> listIDCLB= new ArrayList<>();
    ArrayList<String>  listCLBname= new ArrayList<>();
    ArrayList<Integer> listIDPlayer= new ArrayList<>();
    ArrayList<String>  listPlayerName= new ArrayList<>();
    ListResultItem listrs= new ListResultItem();
    boolean flag=false;
    
    public ResultDetails(int matchid) {
        setTitle("Reuslt Details");
        idmatch=matchid;
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        LoadResultDetails(matchid);
        LoadCBClub(result);
        LoadPlayer();
        LoadStatus();
        LoadScored1();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblPic1 = new javax.swing.JLabel();
        lblPic2 = new javax.swing.JLabel();
        lblTeam1 = new javax.swing.JLabel();
        lblTeam2 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        lblScore1 = new javax.swing.JLabel();
        lblScore2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        cbbClub = new javax.swing.JComboBox<>();
        cbbStatus = new javax.swing.JComboBox<>();
        cbbPlayer = new javax.swing.JComboBox<>();
        spinTime = new com.toedter.components.JSpinField();
        btnDraw = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblResult = new javax.swing.JTable();

        jLabel4.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel4.setText("Status");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        lblPic1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagestore/football-club.png"))); // NOI18N

        lblPic2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagestore/football-club.png"))); // NOI18N

        lblTeam1.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        lblTeam1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTeam1.setText("Man United");

        lblTeam2.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        lblTeam2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTeam2.setText("Man City");

        lblScore1.setFont(new java.awt.Font("sansserif", 1, 48)); // NOI18N
        lblScore1.setText("0");

        lblScore2.setFont(new java.awt.Font("sansserif", 1, 48)); // NOI18N
        lblScore2.setText("0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(lblPic1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74)
                .addComponent(lblScore1)
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblScore2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addComponent(lblPic2)
                .addGap(109, 109, 109))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(lblTeam1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTeam2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblScore1)
                        .addComponent(lblScore2))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblPic2)
                        .addComponent(lblPic1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTeam2)
                    .addComponent(lblTeam1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSeparator1.setToolTipText("");

        jSeparator3.setToolTipText("");

        jLabel1.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel1.setText("Club");

        jLabel2.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel2.setText("Player");

        jLabel3.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel3.setText("Status");

        jLabel5.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel5.setText("Time");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update Ranking");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        cbbClub.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbbClub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbClubActionPerformed(evt);
            }
        });

        cbbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbbPlayer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnDraw.setText("Draw");
        btnDraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDrawActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        tblResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblResult);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(33, 33, 33)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(12, 12, 12)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cbbStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(cbbClub, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(btnDelete)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cbbPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(spinTime, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnDraw, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnUpdate)))))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(cbbClub, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbbPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel5)
                        .addComponent(cbbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(spinTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnAdd)
                    .addComponent(btnDraw)
                    .addComponent(btnDelete))
                .addGap(0, 14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cbbClubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbClubActionPerformed
        // TODO add your handling code here:
        LoadPlayer();
    }//GEN-LAST:event_cbbClubActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        Connection con= new ConnectDB().createConn();
        String add="insert into result(idclb,idmatch,idpl,time_RESULT,typ) values(?,?,?,?,?)";
        try{
            PreparedStatement pre= con.prepareStatement(add,ResultSet.TYPE_SCROLL_SENSITIVE, 
                        ResultSet.CONCUR_UPDATABLE);
            pre.setInt(1, listIDCLB.get(cbbClub.getSelectedIndex()));
            pre.setInt(2, result.getIdmatch());
            pre.setInt(3, listIDPlayer.get(cbbPlayer.getSelectedIndex()));
            pre.setInt(4, spinTime.getValue());
            pre.setString(5, cbbStatus.getItemAt(cbbStatus.getSelectedIndex()));
            
            pre.executeUpdate();
            
            if(cbbStatus.getItemAt(cbbStatus.getSelectedIndex()).equals("Score")){
                String updateMatch=null;
                if(cbbClub.getSelectedIndex()==0){
                    updateMatch="update match1 set SCORED1=SCORED1+1 where idmatch=?";

                }
                else{
                    updateMatch="update match1 set SCORED2=SCORED2+1 where idmatch=?";
                }
                pre=con.prepareStatement(updateMatch,ResultSet.TYPE_SCROLL_SENSITIVE, 
                        ResultSet.CONCUR_UPDATABLE);
                pre.setInt(1, idmatch);
                pre.executeUpdate();
                
                String updatePlayer="update football_player set SCORE=SCORE+1 where idpl=?";
                pre=con.prepareStatement(updatePlayer,ResultSet.TYPE_SCROLL_SENSITIVE, 
                        ResultSet.CONCUR_UPDATABLE);
                pre.setInt(1, listIDPlayer.get(cbbPlayer.getSelectedIndex()));
                pre.executeUpdate();
            }
            else if(cbbStatus.getItemAt(cbbStatus.getSelectedIndex()).equals("Yellow card")){
                String updatePlayer="update football_player set YELLOWCARD=YELLOWCARD+1 where idpl=?";
                pre=con.prepareStatement(updatePlayer,ResultSet.TYPE_SCROLL_SENSITIVE, 
                        ResultSet.CONCUR_UPDATABLE);
                pre.setInt(1, listIDPlayer.get(cbbPlayer.getSelectedIndex()));
                pre.executeUpdate();
            }
            else{
                String updatePlayer="update football_player set REDCARD=REDCARD+1 where idpl=?";
                pre=con.prepareStatement(updatePlayer,ResultSet.TYPE_SCROLL_SENSITIVE, 
                        ResultSet.CONCUR_UPDATABLE);
                pre.setInt(1, listIDPlayer.get(cbbPlayer.getSelectedIndex()));
                pre.executeUpdate();
            }
            con.close();
        }
        catch(SQLException e){
            e.printStackTrace();
            System.out.println("Lỗi add result");
        }
        flag=true;
        LoadResultDetails(idmatch);
        LoadScored1();
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDrawActionPerformed
        // TODO add your handling code here:
        flag=true;
        LoadResultDetails(idmatch);
    }//GEN-LAST:event_btnDrawActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int score1,score2;
        score1=Integer.parseInt(lblScore1.getText());
        score2=Integer.parseInt(lblScore2.getText());
        Connection con = new ConnectDB().createConn();
        String updateDraw="update club set score=score+1, draw=draw+1,bt=bt+?,sbt=sbt+?,st=st+1 where idclb=?";
        String updateWin="update club set score=score+3, win=win+1,hs=hs+(?-?),bt=bt+?,sbt=sbt+?,st=st+1 where idclb=?";
        String updateLose="update club set lose=lose+1,hs=hs+(?-?),bt=bt+?,sbt=sbt+?,st=st+1 where idclb=?";
        try{
            if(score1==score2){
                PreparedStatement pre= con.prepareStatement(updateDraw,ResultSet.TYPE_SCROLL_SENSITIVE, 
                        ResultSet.CONCUR_UPDATABLE);
                pre.setInt(1, score1);
                pre.setInt(2, score1);
                pre.setInt(3, listIDCLB.get(0));
                pre.executeUpdate();
                pre.setInt(3, listIDCLB.get(1));
                pre.executeUpdate();
            }
            else if(score1>score2){
                PreparedStatement pre= con.prepareStatement(updateWin,ResultSet.TYPE_SCROLL_SENSITIVE, 
                        ResultSet.CONCUR_UPDATABLE);
                pre.setInt(1, score1);
                pre.setInt(2, score2);
                pre.setInt(3, score1);
                pre.setInt(4, score2);
                pre.setInt(5, listIDCLB.get(0));
                pre.executeUpdate();
                
                pre= con.prepareStatement(updateLose,ResultSet.TYPE_SCROLL_SENSITIVE, 
                        ResultSet.CONCUR_UPDATABLE);
                pre.setInt(1, score2);
                pre.setInt(2, score1);
                pre.setInt(3, score2);
                pre.setInt(4, score1);
                pre.setInt(5, listIDCLB.get(1));
                pre.executeUpdate();
                
            }
            else{
                PreparedStatement pre= con.prepareStatement(updateWin,ResultSet.TYPE_SCROLL_SENSITIVE, 
                        ResultSet.CONCUR_UPDATABLE);
                pre.setInt(1, score2);
                pre.setInt(2, score1);
                pre.setInt(3, score2);
                pre.setInt(4, score1);
                pre.setInt(5, listIDCLB.get(1));
                pre.executeUpdate();
                
                pre= con.prepareStatement(updateLose,ResultSet.TYPE_SCROLL_SENSITIVE, 
                        ResultSet.CONCUR_UPDATABLE);
                pre.setInt(1, score1);
                pre.setInt(2, score2);
                pre.setInt(3, score1);
                pre.setInt(4, score2);
                pre.setInt(5, listIDCLB.get(0));
                pre.executeUpdate();
            }
            String setSTT="update match1 set stt=? where idmatch=?";
            PreparedStatement pre= con.prepareStatement(setSTT,ResultSet.TYPE_SCROLL_SENSITIVE, 
                        ResultSet.CONCUR_UPDATABLE);
            pre.setBoolean(1, true);
            pre.setInt(2, idmatch);
            pre.executeUpdate();
            con.close();
        }
        catch(SQLException e){
            e.printStackTrace();
            System.out.println("Lỗi update bxh");
        }
        JOptionPane.showMessageDialog(null,"Thêm dữ liệu thành công","Thông báo",JOptionPane.INFORMATION_MESSAGE);
        this.dispose();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
            int indexTB=tblResult.getSelectedRow();
            ResultItem rs =listrs.LayThongTin(indexTB);
            int resultSelected=rs.getIdobject();
            
            int result = JOptionPane.showConfirmDialog(this,"Sure? You want to delete?", "Swing Tester",
               JOptionPane.YES_NO_OPTION,
               JOptionPane.QUESTION_MESSAGE);
            if(result == JOptionPane.YES_OPTION){
                Connection con=new ConnectDB().createConn();
                String delete="delete from result where IDRESULT=?";
                try{
                    PreparedStatement pre= con.prepareStatement(delete,ResultSet.TYPE_SCROLL_SENSITIVE, 
                        ResultSet.CONCUR_UPDATABLE);
                    pre.setInt(1, resultSelected);
                    pre.executeUpdate();
                    
                    if(rs.getType().equals("Score")){
                        String updateMatch=null;
                        if(rs.getIdclb()==listIDCLB.get(0)){
                            updateMatch="update match1 set SCORED1=SCORED1-1 where idmatch=?";

                        }
                        else{
                            updateMatch="update match1 set SCORED2=SCORED2-1 where idmatch=?";
                        }
                        pre=con.prepareStatement(updateMatch,ResultSet.TYPE_SCROLL_SENSITIVE, 
                                ResultSet.CONCUR_UPDATABLE);
                        pre.setInt(1, idmatch);
                        pre.executeUpdate();
                        
                        String updatePlayer="update football_player set SCORE=SCORE-1 where idpl=?";
                        pre=con.prepareStatement(updatePlayer,ResultSet.TYPE_SCROLL_SENSITIVE, 
                                ResultSet.CONCUR_UPDATABLE);
                        pre.setInt(1, rs.getIdpl());
                        pre.executeUpdate();
                    }
                    else if(rs.getType().equals("Yellow card")){
                        String updatePlayer="update football_player set YELLOWCARD=YELLOWCARD-1 where idpl=?";
                        pre=con.prepareStatement(updatePlayer,ResultSet.TYPE_SCROLL_SENSITIVE, 
                                ResultSet.CONCUR_UPDATABLE);
                        pre.setInt(1, rs.getIdpl());
                        pre.executeUpdate();
                    }
                    else{
                        String updatePlayer="update football_player set REDCARD=REDCARD-1 where idpl=?";
                        pre=con.prepareStatement(updatePlayer,ResultSet.TYPE_SCROLL_SENSITIVE, 
                                ResultSet.CONCUR_UPDATABLE);
                        pre.setInt(1, rs.getIdpl());
                        pre.executeUpdate();
                    }
                    con.close();
                }
                catch(SQLException e){
                    e.printStackTrace();
                    System.out.println("Lỗi xoá result");
                }
                flag=true;
                LoadResultDetails(idmatch);
                LoadScored1();
            }
            
    }//GEN-LAST:event_btnDeleteActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ResultDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ResultDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ResultDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResultDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ResultDetails(idmatch).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDraw;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbbClub;
    private javax.swing.JComboBox<String> cbbPlayer;
    private javax.swing.JComboBox<String> cbbStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel lblPic1;
    private javax.swing.JLabel lblPic2;
    private javax.swing.JLabel lblScore1;
    private javax.swing.JLabel lblScore2;
    private javax.swing.JLabel lblTeam1;
    private javax.swing.JLabel lblTeam2;
    private com.toedter.components.JSpinField spinTime;
    private javax.swing.JTable tblResult;
    // End of variables declaration//GEN-END:variables

    private void LoadResultDetails(int matchid) {
        Connection con = new ConnectDB().createConn();
        String sqlResult= "select * from match1 where idmatch =?";
        try{
            PreparedStatement pre = con.prepareStatement(sqlResult,ResultSet.TYPE_SCROLL_SENSITIVE, 
                        ResultSet.CONCUR_UPDATABLE);
            pre.setInt(1, matchid);
            ResultSet rs= pre.executeQuery();
            while(rs.next()){
                
                result.setIdmatch(idmatch);
                result.setIdteam1(rs.getInt("clb1"));
                result.setIdteam2(rs.getInt("clb2"));
                result.setScore1(rs.getInt("scored1"));
                result.setScore2(rs.getInt("scored2"));
                result.setStatus(rs.getBoolean("stt"));
                result.setIdtnm(rs.getInt("idtnm"));
                
            }
            String sqlLOGO="select logo,clbname from club where idclb=?";
            pre=con.prepareStatement(sqlLOGO,ResultSet.TYPE_SCROLL_SENSITIVE, 
                        ResultSet.CONCUR_UPDATABLE);
            pre.setInt(1, result.getIdteam1());
            rs=pre.executeQuery();
            while(rs.next()){
                result.setPic1(rs.getString("logo"));
                result.setTeam1name(rs.getString("clbname"));
            }
            pre.setInt(1, result.getIdteam2());
            rs=pre.executeQuery();
            while(rs.next()){
                result.setPic2(rs.getString("logo"));
                result.setTeam2name(rs.getString("clbname"));
            }
            
            con.close();
        }
        catch(SQLException e){
            e.printStackTrace();
            System.out.println("Lỗi load result");
        }
        lblTeam1.setText(result.getTeam1name());
        lblTeam2.setText(result.getTeam2name());
        if(result.getStatus()==true)
        {
            btnAdd.setEnabled(false);
            btnDelete.setEnabled(false);
            btnDraw.setEnabled(false);
            btnUpdate.setEnabled(false);
            lblScore1.setText(String.valueOf(result.getScore1()));
            lblScore2.setText(String.valueOf(result.getScore2()));
        }
        else{
            if(flag==false){
            lblScore1.setText("  ");
            lblScore2.setText("  ");
            }
            else{
                lblScore1.setText(String.valueOf(result.getScore1()));
                lblScore2.setText(String.valueOf(result.getScore2()));
            }
        }
        
        ImageIcon imgThisImg = new ImageIcon(new ImageIcon(result.getPic1()).getImage()
               .getScaledInstance(64, 64, Image.SCALE_SMOOTH));
               lblPic1.setIcon(imgThisImg);
        imgThisImg = new ImageIcon(new ImageIcon(result.getPic2()).getImage()
               .getScaledInstance(64, 64, Image.SCALE_SMOOTH));
               lblPic2.setIcon(imgThisImg);
        
    }

    private void LoadCBClub(MatchShedules result) {
        listCLBname.removeAll(listIDCLB);
        listIDCLB.removeAll(listIDCLB);
        
        listIDCLB.add(result.getIdteam1());
        listIDCLB.add(result.getIdteam2());
        
        listCLBname.add(result.getTeam1name());
        listCLBname.add(result.getTeam2name());
        
        cbbClub.setModel(new DefaultComboBoxModel<String>(listCLBname.toArray(new String[0])));
    }

    private void LoadPlayer() {
        listIDPlayer.removeAll(listIDPlayer);
        listPlayerName.removeAll(listPlayerName);
        int idClub=listIDCLB.get(cbbClub.getSelectedIndex());
        Connection con= new ConnectDB().createConn();
        String sqlPL="select idpl,plname from football_player where idclb=?";
        try{
            PreparedStatement pre= con.prepareStatement(sqlPL,ResultSet.TYPE_SCROLL_SENSITIVE, 
                        ResultSet.CONCUR_UPDATABLE);
            pre.setInt(1, idClub);
            ResultSet rs=pre.executeQuery();
            while(rs.next()){
                listIDPlayer.add(rs.getInt("idpl"));
                listPlayerName.add(rs.getString("plname"));
            }
            con.close();
        }
        catch(SQLException e){
            e.printStackTrace();
            System.out.println("Lỗi load player");
        }
        cbbPlayer.setModel(new DefaultComboBoxModel<String>(listPlayerName.toArray(new String[0])));        
    }

    private void LoadStatus() {
        String status[]={"Score","Yellow card","Red card"};
        cbbStatus.setModel(new DefaultComboBoxModel<String>(status));
    }

    public String getPLName(int idpl){
        String name = null;
        Connection con= new ConnectDB().createConn();
        String sqlName="select plname from football_player where idpl=?";
        try{
            PreparedStatement pre= con.prepareStatement(sqlName,ResultSet.TYPE_SCROLL_SENSITIVE, 
                        ResultSet.CONCUR_UPDATABLE);
            pre.setInt(1, idpl);
            ResultSet rs= pre.executeQuery();
            while(rs.next()){
                name=rs.getString("plname");
            }
            con.close();
        }
        catch(SQLException e){
            e.printStackTrace();
            System.out.println("Lỗi lấy tên player");
        }
        return name;
    }
    public void LoadRSTeam(){
        listrs.ListResultItem.removeAll(listrs.ListResultItem);
        Connection con= new ConnectDB().createConn();
        String sqlRS="select * from result where idmatch= ?  ORDER BY time_result ASC";
        try{
            PreparedStatement pre= con.prepareStatement(sqlRS,ResultSet.TYPE_SCROLL_SENSITIVE, 
                        ResultSet.CONCUR_UPDATABLE);
            pre.setInt(1, result.getIdmatch());
            ResultSet rs= pre.executeQuery();
            while(rs.next()){
                ResultItem resultitem= new ResultItem();
                resultitem.setIdclb(rs.getInt("idclb"));
                resultitem.setIdmatch(rs.getInt("idmatch"));
                resultitem.setIdobject(rs.getInt("idresult"));
                resultitem.setTime(rs.getInt("time_result"));
                resultitem.setType(rs.getString("typ"));
                resultitem.setIdpl(rs.getInt("idpl"));
                
                listrs.ThemResultItem(resultitem);
            }
            
            con.close();
        }
        catch(SQLException e){
            e.printStackTrace();
            System.out.println("Lỗi load table");
        }
    }
    DefaultTableModel tblmodel;
    private void LoadScored1() {
        LoadRSTeam();
        tblmodel = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int column) {
               return false;
            }
        };
        String tieude[]={"","","","",""};
        tblmodel.setColumnIdentifiers(tieude);
        for(ResultItem s: listrs.ListResultItem){
            if(s.getIdclb()==listIDCLB.get(0)){
                String row[]=new String[5];
                row[0]=String.valueOf(s.getTime())+"'";
                String name=getPLName(s.getIdpl());
                row[1]=name;

                if(s.getType().equals("Score")){
                    row[2]="imagestore\\score.png";
                }
                else if(s.getType().equals("Yellow card"))
                    row[2]="imagestore\\yellow-card.png";
                else
                    row[2]="imagestore\\red.png";
                row[3]="";
                row[4]="";
                tblmodel.addRow(row);
            }
            else{
                String row[]=new String[5];
                row[4]=String.valueOf(s.getTime())+"'";
                String name=getPLName(s.getIdpl());
                row[3]=name;

                if(s.getType().equals("Score")){
                    row[2]="imagestore\\score.png";
                }
                else if(s.getType().equals("Yellow card"))
                    row[2]="imagestore\\yellow-card.png";
                else
                    row[2]="imagestore\\red.png";
                row[1]="";
                row[0]="";
                tblmodel.addRow(row);
            }
        }
        //set model cho table
        tblResult.setBackground(Color.WHITE);
        tblResult.setModel(tblmodel);
        tblResult.setFont(new Font("Serif", Font.PLAIN, 14));
        tblResult.setRowHeight(32);
        TableColumnModel columnModel = tblResult.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(20);
        columnModel.getColumn(1).setPreferredWidth(120);
        columnModel.getColumn(2).setPreferredWidth(24);
        columnModel.getColumn(3).setPreferredWidth(100);
        columnModel.getColumn(4).setPreferredWidth(20);
        tblResult.getColumnModel().getColumn(2).setCellRenderer(new TableRenderer());
        this.setVisible(true);
    }

    private void LoadPlayerAfterRed(ArrayList<String> listPlayerName) {
        cbbPlayer.setModel(new DefaultComboBoxModel<String>(listPlayerName.toArray(new String[0])));  
    }


}
