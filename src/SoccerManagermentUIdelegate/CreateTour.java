/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package SoccerManagermentUIdelegate;


import java.sql.*;
import SoccerManagementModel.*;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import SoccerManagementDTO.*;
import java.awt.Image;
import java.util.ArrayList;

/**
 *
 * @author Administrator
 */
public class CreateTour extends javax.swing.JFrame {
    /**
     * Creates new form CreateTour
     */
    public CreateTour() {
        setTitle("Create Tournament");
        setVisible(true);
        initComponents();
        Date date=new Date();
        TimeEnd.setDate(date);
        TimeStart.setDate(date);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMain = new javax.swing.JPanel();
        btnBack = new javax.swing.JButton();
        txtOrganizer = new javax.swing.JTextField();
        txtTourName = new javax.swing.JTextField();
        txtLocation = new javax.swing.JTextField();
        TimeStart = new com.toedter.calendar.JDateChooser();
        TimeEnd = new com.toedter.calendar.JDateChooser();
        cbRoundKicks = new javax.swing.JComboBox<>();
        lblLOGO = new javax.swing.JLabel();
        btnImage = new javax.swing.JButton();
        lblNumMatch = new javax.swing.JLabel();
        btnCreat = new javax.swing.JButton();
        txtNumTeam = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        panelMain.setBackground(new java.awt.Color(255, 255, 255));

        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagestore/previous.png"))); // NOI18N
        btnBack.setBorder(null);
        btnBack.setBorderPainted(false);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        txtOrganizer.setBorder(javax.swing.BorderFactory.createTitledBorder("Organizer"));

        txtTourName.setBorder(javax.swing.BorderFactory.createTitledBorder("Tournament Name"));

        txtLocation.setBorder(javax.swing.BorderFactory.createTitledBorder("Location"));

        TimeStart.setBackground(new java.awt.Color(255, 255, 255));
        TimeStart.setBorder(javax.swing.BorderFactory.createTitledBorder("Time Start"));
        TimeStart.setForeground(new java.awt.Color(255, 255, 255));
        TimeStart.setDateFormatString("yyyy-MM-dd");

        TimeEnd.setBackground(new java.awt.Color(255, 255, 255));
        TimeEnd.setBorder(javax.swing.BorderFactory.createTitledBorder("Time End"));
        TimeEnd.setForeground(new java.awt.Color(255, 255, 255));
        TimeEnd.setDateFormatString("yyyy-MM-dd");

        cbRoundKicks.setForeground(new java.awt.Color(255, 255, 255));
        cbRoundKicks.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2" }));
        cbRoundKicks.setBorder(javax.swing.BorderFactory.createTitledBorder("Number Of Round Kicks"));
        cbRoundKicks.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbRoundKicksItemStateChanged(evt);
            }
        });

        lblLOGO.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagestore/football-player.png"))); // NOI18N

        btnImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagestore/icon_open.png"))); // NOI18N
        btnImage.setText("Insert Image");
        btnImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImageActionPerformed(evt);
            }
        });

        lblNumMatch.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblNumMatch.setForeground(new java.awt.Color(0, 102, 102));
        lblNumMatch.setText("Number matchs of Tournament:  1");

        btnCreat.setBackground(new java.awt.Color(0, 255, 153));
        btnCreat.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCreat.setForeground(new java.awt.Color(255, 255, 255));
        btnCreat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagestore/Create.png"))); // NOI18N
        btnCreat.setText("Create Tournament");
        btnCreat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatActionPerformed(evt);
            }
        });

        txtNumTeam.setBorder(javax.swing.BorderFactory.createTitledBorder("Number of Teams"));
        txtNumTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumTeamActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelMainLayout = new javax.swing.GroupLayout(panelMain);
        panelMain.setLayout(panelMainLayout);
        panelMainLayout.setHorizontalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbRoundKicks, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panelMainLayout.createSequentialGroup()
                                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtTourName, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                                    .addComponent(txtOrganizer, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtLocation, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblLOGO, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(btnImage, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)))
                            .addComponent(lblNumMatch, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelMainLayout.createSequentialGroup()
                                .addComponent(TimeStart, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(TimeEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtNumTeam)))
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(41, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMainLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnCreat, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(109, 109, 109))
        );
        panelMainLayout.setVerticalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImage)
                    .addComponent(txtTourName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addComponent(txtOrganizer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblLOGO))
                .addGap(9, 9, 9)
                .addComponent(txtNumTeam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TimeStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TimeEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(cbRoundKicks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblNumMatch)
                .addGap(18, 18, 18)
                .addComponent(btnCreat)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void btnCreatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatActionPerformed
        // TODO add your handling code here:
        Connection con=new ConnectDB().createConn();
        int NewID=0,num=Integer.parseInt(txtNumTeam.getText()),sodoi=0;
        String sqlSelectedTourID="SELECT MAX(idtnm) FROM tournament";
        
        String sql= "insert into tournament(tnmname,sl,organizational,location,timestart,timeend,logo,roundkick,matchnum) values(?,?,?,?,?,?,?,?,?)";
        try{
            //get tourID
            PreparedStatement pre= con.prepareStatement(sqlSelectedTourID,ResultSet.TYPE_SCROLL_SENSITIVE, 
                        ResultSet.CONCUR_UPDATABLE);
            ResultSet rs= pre.executeQuery();
            if(rs.next()==true){
                rs.absolute(1);
                NewID=rs.getInt("MAX(idtnm)")+1;
            }
                
            System.out.println(NewID);
            //create tour
            pre=con.prepareStatement(sql);
            pre.setString(1, txtTourName.getText());
            pre.setString(2, txtNumTeam.getText());
            pre.setString(3, txtOrganizer.getText());
            pre.setString(4, txtLocation.getText());
            DateFormat df=new SimpleDateFormat("yyyy-MM-dd");
            pre.setString(5, df.format(TimeStart.getDate()));
            pre.setString(6, df.format(TimeEnd.getDate()));
            pre.setString(7, path);
            pre.setString(8,cbRoundKicks.getItemAt(cbRoundKicks.getSelectedIndex()));
            pre.setInt(9,sotran);
            pre.executeUpdate();
            
            //create default club
            String sqlCreateDefaultClub="insert into club(clbname,IDTNM) values(null,"+String.valueOf(NewID)+")";
            for(int i=0; i<num;i++){
                Statement stat= con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, 
                        ResultSet.CONCUR_UPDATABLE);
                stat.executeUpdate(sqlCreateDefaultClub);
            }
            

            //create auto macth shedule
            String sqlmatch="select idclb from club where idtnm=?";
            pre=con.prepareStatement(sqlmatch,ResultSet.TYPE_SCROLL_SENSITIVE, 
                        ResultSet.CONCUR_UPDATABLE);
            pre.setInt(1,NewID);
            rs=pre.executeQuery();
            if(num%2==0){
                sodoi=num;
            }
            else
                sodoi=num+1;
            int []arr= new int[sodoi];   
            int i=0;
            while(rs.next()){
                arr[i]=rs.getInt("idclb");
                i++;
            }
            if(sodoi%2!=0)
                arr[sodoi-1]=0;
            
            MatchScheduleAlgorithm match= new MatchScheduleAlgorithm();
            match.algorithm(arr);
            ArrayList<Integer> team1= new ArrayList<>();
            ArrayList<Integer> team2= new ArrayList<>();
            team1=match.arr1;
            team2=match.arr2;
            int round=Integer.parseInt(cbRoundKicks.getItemAt(cbRoundKicks.getSelectedIndex()));
            System.out.println(round);
            String sqlCreateMatch="insert into match1(clb1,clb2,idtnm) values(?,?,"+String.valueOf(NewID)+")";
                if(round==2){
                    if(num%2==0){
                        for(int j=0;j<sotran/2;j++){

                            if(team1.get(j)==0||team2.get(j)==0){
                                continue;
                            }
                            pre=con.prepareStatement(sqlCreateMatch,ResultSet.TYPE_SCROLL_SENSITIVE, 
                                    ResultSet.CONCUR_UPDATABLE);                
                            pre.setString(1,team1.get(j).toString());
                            pre.setString(2,team2.get(j).toString());
                            pre.executeUpdate();
                            }
                        for(int j=0;j<sotran/2;j++){

                            if(team1.get(j)==0||team2.get(j)==0){
                                continue;
                            }
                            pre=con.prepareStatement(sqlCreateMatch,ResultSet.TYPE_SCROLL_SENSITIVE, 
                                    ResultSet.CONCUR_UPDATABLE);                
                            pre.setString(1,team2.get(j).toString());
                            pre.setString(2,team1.get(j).toString());
                            pre.executeUpdate();
                        }
                    }
                    else{
                        for(int j=0;j<(sotran/2)+num;j++){

                            if(team1.get(j)==0||team2.get(j)==0){
                                continue;
                            }
                            pre=con.prepareStatement(sqlCreateMatch,ResultSet.TYPE_SCROLL_SENSITIVE, 
                                    ResultSet.CONCUR_UPDATABLE);                
                            pre.setString(1,team1.get(j).toString());
                            pre.setString(2,team2.get(j).toString());
                            pre.executeUpdate();
                            }
                        for(int j=0;j<(sotran/2)+num;j++){

                            if(team1.get(j)==0||team2.get(j)==0){
                                continue;
                            }
                            pre=con.prepareStatement(sqlCreateMatch,ResultSet.TYPE_SCROLL_SENSITIVE, 
                                    ResultSet.CONCUR_UPDATABLE);                
                            pre.setString(1,team2.get(j).toString());
                            pre.setString(2,team1.get(j).toString());
                            pre.executeUpdate();
                        }
                    }
                    
                }
                else{
                    if(num%2==0){
                        for(int j=0;j<sotran;j++){

                        if(team1.get(j)==0||team2.get(j)==0){
                            continue;
                        }
                        pre=con.prepareStatement(sqlCreateMatch,ResultSet.TYPE_SCROLL_SENSITIVE, 
                                ResultSet.CONCUR_UPDATABLE);                
                        pre.setString(1,team1.get(j).toString());
                        pre.setString(2,team2.get(j).toString());
                        pre.executeUpdate();
                        }
                    }
                    else{
                        for(int j=0;j<sotran+num;j++){

                        if(team1.get(j)==0||team2.get(j)==0){
                            continue;
                        }
                        pre=con.prepareStatement(sqlCreateMatch,ResultSet.TYPE_SCROLL_SENSITIVE, 
                                ResultSet.CONCUR_UPDATABLE);                
                        pre.setString(1,team1.get(j).toString());
                        pre.setString(2,team2.get(j).toString());
                        pre.executeUpdate();
                        }
                    }
                }
                    

            
            
            
            con.close();
            
        }
        catch(SQLException e){
            e.printStackTrace();
            System.out.println("Lỗi create tournament");
        }
        
        this.setVisible(false);
        new StartingPage().setVisible(true);
    }//GEN-LAST:event_btnCreatActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new StartingPage().setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    String path ="imagestore\\football-player.png";
    private void btnImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImageActionPerformed
        // TODO add your handling code here:
            JFileChooser fileChooser = new JFileChooser("imagestore");
            fileChooser.addChoosableFileFilter(new ImageFilter());
            fileChooser.setAcceptAllFileFilterUsed(false);

            int option = fileChooser.showOpenDialog(this);
            if(option == JFileChooser.APPROVE_OPTION){
               File file = fileChooser.getSelectedFile();
               path = file.getAbsolutePath();
               ImageIcon imgThisImg = new ImageIcon(new ImageIcon(path).getImage().getScaledInstance(128, 128, Image.SCALE_SMOOTH));
               lblLOGO.setIcon(imgThisImg);
            }
            
    }//GEN-LAST:event_btnImageActionPerformed
    int sotran;
    private void cbRoundKicksItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbRoundKicksItemStateChanged
        // TODO add your handling code here:
        LoadNumMatch();
    }//GEN-LAST:event_cbRoundKicksItemStateChanged

    private void txtNumTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumTeamActionPerformed
        // TODO add your handling code here:
        LoadNumMatch();
    }//GEN-LAST:event_txtNumTeamActionPerformed

    private void LoadNumMatch() {
        int rk=Integer.parseInt(cbRoundKicks.getItemAt(cbRoundKicks.getSelectedIndex()));
        int number=Integer.parseInt(txtNumTeam.getText());
        sotran=number*(number-1)/2*rk;
        lblNumMatch.setText("Number matchs of Tournament:  "+sotran);
    }
  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateTour.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateTour.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateTour.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateTour.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateTour().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser TimeEnd;
    private com.toedter.calendar.JDateChooser TimeStart;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreat;
    private javax.swing.JButton btnImage;
    private javax.swing.JComboBox<String> cbRoundKicks;
    private javax.swing.JLabel lblLOGO;
    private javax.swing.JLabel lblNumMatch;
    private javax.swing.JPanel panelMain;
    private javax.swing.JTextField txtLocation;
    private javax.swing.JTextField txtNumTeam;
    private javax.swing.JTextField txtOrganizer;
    private javax.swing.JTextField txtTourName;
    // End of variables declaration//GEN-END:variables
}
